--添加商品缩放倍率
alter table PUB_GOODS_RELATION add ZOOM_RATE decimal(18, 3) DEFAULT 1  NOT NULL ;
--为应用服务器添加默认产品
alter table CA_SERVER_INFO add PROD_ID varchar2(10);


--企业经营商品视图,自经营商品+连锁商品    
drop view VIW_GOODSINFO;                                          
CREATE view VIW_GOODSINFO
as
select 1 as RELATION_FLAG,B.RELATION_ID,C.RELATI_ID as TENANT_ID,A.GODS_ID,
       B.GODS_CODE as SECOND_CODE,B.SECOND_ID,B.COMM_ID,
       BARCODE,UNIT_ID,CALC_UNITS,SMALL_UNITS,BIG_UNITS,SMALLTO_CALC,BIGTO_CALC,
       nvl(B.GODS_CODE,A.GODS_CODE) as GODS_CODE,GODS_TYPE,
       nvl(B.GODS_NAME,A.GODS_NAME) as GODS_NAME,
       nvl(B.GODS_SPELL,A.GODS_SPELL) as GODS_SPELL,
       nvl(B.SORT_ID1,A.SORT_ID1) as SORT_ID1,
       nvl(B.SORT_ID2,A.SORT_ID2) as SORT_ID2,
       nvl(B.SORT_ID3,A.SORT_ID3) as SORT_ID3,
       nvl(B.SORT_ID4,A.SORT_ID4) as SORT_ID4,
       nvl(B.SORT_ID5,A.SORT_ID5) as SORT_ID5,
       nvl(B.SORT_ID6,A.SORT_ID6) as SORT_ID6,
       nvl(B.SORT_ID7,A.SORT_ID7) as SORT_ID7,
       nvl(B.SORT_ID8,A.SORT_ID8) as SORT_ID8,
       nvl(B.SORT_ID9,A.SORT_ID9) as SORT_ID9,
       nvl(B.SORT_ID10,A.SORT_ID10) as SORT_ID10,
       nvl(B.SORT_ID11,A.SORT_ID11) as SORT_ID11,
       nvl(B.SORT_ID12,A.SORT_ID12) as SORT_ID12,
       nvl(B.SORT_ID13,A.SORT_ID13) as SORT_ID13,
       nvl(B.SORT_ID14,A.SORT_ID14) as SORT_ID14,
       nvl(B.SORT_ID15,A.SORT_ID15) as SORT_ID15,
       nvl(B.SORT_ID16,A.SORT_ID16) as SORT_ID16,
       nvl(B.SORT_ID17,A.SORT_ID17) as SORT_ID17,
       nvl(B.SORT_ID18,A.SORT_ID18) as SORT_ID18,
       nvl(B.SORT_ID19,A.SORT_ID19) as SORT_ID19,
       nvl(B.SORT_ID20,A.SORT_ID20) as SORT_ID20,
       nvl(B.NEW_INPRICE,A.NEW_INPRICE) as NEW_INPRICE,
       nvl(B.NEW_OUTPRICE,A.NEW_OUTPRICE) as NEW_OUTPRICE,
       nvl(B.NEW_LOWPRICE,A.NEW_LOWPRICE) as NEW_LOWPRICE,
       nvl(B.USING_BARTER,A.USING_BARTER) as USING_BARTER,
       nvl(B.BARTER_INTEGRAL,A.BARTER_INTEGRAL) as BARTER_INTEGRAL,
       nvl(B.USING_PRICE,A.USING_PRICE) as USING_PRICE,
       nvl(B.HAS_INTEGRAL,A.HAS_INTEGRAL) as HAS_INTEGRAL,
       nvl(B.USING_BATCH_NO,A.USING_BATCH_NO) as USING_BATCH_NO,
       nvl(B.USING_LOCUS_NO,A.USING_LOCUS_NO) as USING_LOCUS_NO,
       REMARK,'#' as PRICE_ID,A.COMM,nvl(B.ZOOM_RATE,1.000) as ZOOM_RATE,A.TIME_STAMP
from PUB_GOODSINFO A,PUB_GOODS_RELATION B,CA_RELATIONS C
where A.GODS_ID=B.GODS_ID and B.RELATION_ID=C.RELATION_ID and  
( (B.TENANT_ID=C.TENANT_ID  and C.RELATION_TYPE<>'1')
  or
  (B.TENANT_ID=C.RELATI_ID  and C.RELATION_TYPE='1')
)
and B.COMM not in ('02','12') and C.COMM not in ('02','12') and C.RELATION_STATUS='2'
union all
select 2 as RELATION_FLAG,0 as RELATION_ID,TENANT_ID,GODS_ID,
       GODS_CODE as SECOND_CODE,GODS_ID as SECOND_ID,GODS_ID as COMM_ID,
       BARCODE,UNIT_ID,CALC_UNITS,SMALL_UNITS,BIG_UNITS,SMALLTO_CALC,BIGTO_CALC,
       GODS_CODE,GODS_TYPE,GODS_NAME,GODS_SPELL,
       SORT_ID1,SORT_ID2,SORT_ID3,SORT_ID4,SORT_ID5,SORT_ID6,SORT_ID7,SORT_ID8,
       SORT_ID9,SORT_ID10,SORT_ID11,SORT_ID12,SORT_ID13,SORT_ID14,SORT_ID15,SORT_ID16,
       SORT_ID17,SORT_ID18,SORT_ID19,SORT_ID20,
       NEW_INPRICE,NEW_OUTPRICE,NEW_LOWPRICE,
       USING_BARTER,BARTER_INTEGRAL,
       USING_PRICE,HAS_INTEGRAL,USING_BATCH_NO,USING_LOCUS_NO,REMARK,'#' as PRICE_ID,COMM,1.000 as ZOOM_RATE,TIME_STAMP
from PUB_GOODSINFO;

--各商品在企业总部的价格<售价>，不分门店
drop view VIW_GOODSINFOEXT;                                          
CREATE view VIW_GOODSINFOEXT
as
select A.TENANT_ID,A.RELATION_ID,
       A.PRICE_ID,A.GODS_ID,A.GODS_CODE,A.SECOND_ID as SECOND_ID,A.GODS_NAME,A.GODS_SPELL,A.GODS_TYPE,
       A.SORT_ID1,A.SORT_ID2,A.SORT_ID3,A.SORT_ID4,A.SORT_ID5,A.SORT_ID6,A.SORT_ID7,A.SORT_ID8,
       A.SORT_ID9,A.SORT_ID10,A.SORT_ID11,A.SORT_ID12,A.SORT_ID13,A.SORT_ID14,A.SORT_ID15,A.SORT_ID16,
       A.SORT_ID17,A.SORT_ID18,A.SORT_ID19,A.SORT_ID20,
       A.BARCODE,A.UNIT_ID,A.CALC_UNITS,A.SMALL_UNITS,A.BIG_UNITS,A.SMALLTO_CALC,A.BIGTO_CALC,A.NEW_INPRICE,A.NEW_OUTPRICE as RTL_OUTPRICE,
       1 as POLICY_TYPE,
       case when nvl(B.COMM,'02') not in ('02','12') then B.NEW_OUTPRICE else A.NEW_OUTPRICE end NEW_OUTPRICE,
       case when nvl(B.COMM,'02') not in ('02','12') then nvl(B.NEW_OUTPRICE1,B.NEW_OUTPRICE*A.SMALLTO_CALC) else A.NEW_OUTPRICE*A.SMALLTO_CALC end NEW_OUTPRICE1,
       case when nvl(B.COMM,'02') not in ('02','12') then nvl(B.NEW_OUTPRICE2,B.NEW_OUTPRICE*A.BIGTO_CALC) else A.NEW_OUTPRICE*A.BIGTO_CALC end NEW_OUTPRICE2,
       A.NEW_LOWPRICE,A.USING_BARTER,A.BARTER_INTEGRAL,
       A.USING_PRICE,A.HAS_INTEGRAL,A.USING_BATCH_NO,A.USING_LOCUS_NO,A.REMARK,A.ZOOM_RATE,A.COMM,A.TIME_STAMP
from VIW_GOODSINFO A left join PUB_GOODSPRICE B ON A.TENANT_ID=B.TENANT_ID and A.GODS_ID=B.GODS_ID and to_char(A.TENANT_ID)||'0001'=B.SHOP_ID and A.PRICE_ID=B.PRICE_ID;

--每个门店都有记录，关联需加门店
--各商品价格
drop view VIW_GOODSPRICE;                                          
CREATE view VIW_GOODSPRICE
as
select A.TENANT_ID,A.RELATION_ID,C.SHOP_ID,
       A.PRICE_ID,A.GODS_ID,A.GODS_CODE,A.SECOND_ID as SECOND_ID,A.GODS_NAME,A.GODS_SPELL,A.GODS_TYPE,
       A.SORT_ID1,A.SORT_ID2,A.SORT_ID3,A.SORT_ID4,A.SORT_ID5,A.SORT_ID6,A.SORT_ID7,A.SORT_ID8,
       A.SORT_ID9,A.SORT_ID10,A.SORT_ID11,A.SORT_ID12,A.SORT_ID13,A.SORT_ID14,A.SORT_ID15,A.SORT_ID16,
       A.SORT_ID17,A.SORT_ID18,A.SORT_ID19,A.SORT_ID20,
       A.BARCODE,A.UNIT_ID,A.CALC_UNITS,A.SMALL_UNITS,A.BIG_UNITS,A.SMALLTO_CALC,A.BIGTO_CALC,A.NEW_INPRICE,A.RTL_OUTPRICE,
       case when nvl(B.COMM,'02') not in ('02','12') then 2 else 1 end as POLICY_TYPE,
       case when nvl(B.COMM,'02') not in ('02','12') then B.NEW_OUTPRICE else A.NEW_OUTPRICE end NEW_OUTPRICE,
       case when nvl(B.COMM,'02') not in ('02','12') then nvl(B.NEW_OUTPRICE1,B.NEW_OUTPRICE*A.SMALLTO_CALC) else A.NEW_OUTPRICE*A.SMALLTO_CALC end NEW_OUTPRICE1,
       case when nvl(B.COMM,'02') not in ('02','12') then nvl(B.NEW_OUTPRICE2,B.NEW_OUTPRICE*A.BIGTO_CALC) else A.NEW_OUTPRICE*A.BIGTO_CALC end NEW_OUTPRICE2,
       A.NEW_LOWPRICE,A.USING_BARTER,A.BARTER_INTEGRAL,
       A.USING_PRICE,A.HAS_INTEGRAL,A.USING_BATCH_NO,A.USING_LOCUS_NO,A.REMARK,A.COMM,A.ZOOM_RATE,A.TIME_STAMP
from VIW_GOODSINFOEXT A inner join CA_SHOP_INFO C on A.TENANT_ID=C.TENANT_ID
left join PUB_GOODSPRICE B ON C.SHOP_ID=B.SHOP_ID and A.TENANT_ID=B.TENANT_ID and A.GODS_ID=B.GODS_ID and A.PRICE_ID=B.PRICE_ID;

--每个门店都有记录，关联需加门店
drop view VIW_GOODSPRICEEXT;                                          
CREATE view VIW_GOODSPRICEEXT
as
    SELECT 
      j1.TENANT_ID as TENANT_ID,j1.SHOP_ID,j1.RELATION_ID, 
      j1.GODS_ID as GODS_ID,GODS_CODE,j1.GODS_TYPE,BARCODE,GODS_SPELL,GODS_NAME,UNIT_ID,CALC_UNITS,SMALL_UNITS,BIG_UNITS,SMALLTO_CALC,BIGTO_CALC,
       case when J2.NEW_INPRICE is null then J1.NEW_INPRICE else J2.NEW_INPRICE end as NEW_INPRICE,
       case when J2.NEW_INPRICE is null then J1.NEW_INPRICE*J1.SMALLTO_CALC else J2.NEW_INPRICE1 end as NEW_INPRICE1,
       case when J2.NEW_INPRICE is null then J1.NEW_INPRICE*J1.BIGTO_CALC else J2.NEW_INPRICE2 end as NEW_INPRICE2,
       NEW_OUTPRICE,
       NEW_OUTPRICE1,
       NEW_OUTPRICE2,
       NEW_LOWPRICE,
       J1.RTL_OUTPRICE as RTL_OUTPRICE,
       SORT_ID1,SORT_ID2,SORT_ID3,SORT_ID4,SORT_ID5,SORT_ID6,SORT_ID7,SORT_ID8,
       SORT_ID9,SORT_ID10,SORT_ID11,SORT_ID12,SORT_ID13,SORT_ID14,SORT_ID15,SORT_ID16,
       SORT_ID17,SORT_ID18,SORT_ID19,SORT_ID20,
       USING_BARTER,BARTER_INTEGRAL,
       USING_PRICE,HAS_INTEGRAL,USING_BATCH_NO,USING_LOCUS_NO,REMARK,j1.COMM as COMM,j1.ZOOM_RATE,j1.TIME_STAMP as TIME_STAMP
    FROM 
      VIW_GOODSPRICE j1 LEFT JOIN 
      PUB_GOODSINFOEXT j2 ON j1.TENANT_ID = j2.TENANT_ID AND j1.GODS_ID = j2.GODS_ID; 
            
--每个门店都有记录，关联需加门店
drop view VIW_GOODSPRICE_SORTEXT;                                          
CREATE view VIW_GOODSPRICE_SORTEXT
as
    SELECT 
      j1.*,j2.LEVEL_ID,j2.SORT_NAME
    FROM 
      VIW_GOODSPRICEEXT j1 LEFT JOIN 
      VIW_GOODSSORT j2 ON j1.TENANT_ID = j2.TENANT_ID AND j1.SORT_ID1 = j2.SORT_ID and j1.RELATION_ID=j2.RELATION_ID; 
      
--商品分类视图不分门店
drop view VIW_GOODSINFO_SORTEXT;                                          
CREATE view VIW_GOODSINFO_SORTEXT
as
    SELECT 
      j1.*,j2.LEVEL_ID,j2.SORT_NAME
    FROM 
      VIW_GOODSINFO j1 LEFT JOIN 
      VIW_GOODSSORT j2 ON j1.TENANT_ID = j2.TENANT_ID AND j1.SORT_ID1 = j2.SORT_ID and j1.RELATION_ID=j2.RELATION_ID; 

--需求类型
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','补货申请','DEMA_TYPE','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','领用申请','DEMA_TYPE','00',5497000);

--领用单对应的需求填报单
alter table STO_CHANGEORDER add FIG_ID char(36);
--需求填报
CREATE TABLE MKT_DEMANDORDER (
        --企业代码
	TENANT_ID number(9,0) NOT NULL ,
        --门店代码
	SHOP_ID varchar2(13) NOT NULL ,
        --单号
	DEMA_ID char(36) NOT NULL ,
        --需求类型
	DEMA_TYPE char(36) NOT NULL ,
        --流水号
	GLIDE_NO varchar2(20) NOT NULL ,
        --填报日期
	DEMA_DATE number(9,0) ,
        --经销商
	CLIENT_ID varchar2(36) NOT NULL ,
        --所属部门
	DEPT_ID varchar (12) NOT NULL ,
        --填报人
	DEMA_USER varchar2(36) ,
        --审核日期
	CHK_DATE varchar2(10) ,
        --审核人员
	CHK_USER varchar2(36) ,
        --数量汇总
	DEMA_AMT decimal(18, 3) ,
        --金额汇总
	DEMA_MNY decimal(18, 3) ,
        --备注
	REMARK varchar2(100) ,
        --操作时间
	CREA_DATE varchar2 (30)  ,
        --操作人员
	CREA_USER varchar2 (36)  ,
        --通讯标志
	COMM varchar2 (2) NOT NULL  DEFAULT '00',
        --时间戳 当前系统日期*86400000
  TIME_STAMP NUMBER(22,0) NOT NULL,
	CONSTRAINT PK_MKT_DEMANDORDER PRIMARY KEY 
	(
		TENANT_ID,
		DEMA_ID
	) 
);

CREATE INDEX IX_MDMD_TENANT_ID ON MKT_DEMANDORDER(TENANT_ID);
CREATE INDEX IX_MDMD_TIME_STAMP ON MKT_DEMANDORDER(TENANT_ID,TIME_STAMP);
CREATE INDEX IX_MDMD_DEMA_DATE ON MKT_DEMANDORDER(DEMA_DATE);

--需求填报明细
CREATE TABLE MKT_DEMANDDATA (
        --企业代码
	TENANT_ID number(9,0) NOT NULL ,
        --门店代码
	SHOP_ID varchar2(13) NOT NULL ,
        --序号
	SEQNO number(9,0) NOT NULL ,
        --订单号
	DEMA_ID char(36) NOT NULL ,
        --货品代码
	GODS_ID char(36) NOT NULL ,
        --尺码
	PROPERTY_01 varchar2(36) NOT NULL ,
        --颜色
	PROPERTY_02 varchar2(36) NOT NULL ,
        --物流跟踪号
	LOCUS_NO varchar2(36) ,
        --礼盒跟踪号
	BOM_ID char(36) ,
        --批号
	BATCH_NO varchar2(36) ,
        --是否赠品
	IS_PRESENT int NOT NULL,
        --单位
	UNIT_ID varchar2(36) NOT NULL ,
        --订划数量
	AMOUNT decimal(18, 3) ,
        --原单价
	ORG_PRICE decimal(18, 3) ,
        --供货单价
	APRICE decimal(18, 3) ,
        --销售金额
	AMONEY decimal(18, 3) ,
        --折扣率
	AGIO_RATE decimal(18, 3) ,
        --折扣额
	AGIO_MONEY decimal(18, 3) ,
        --计量单位数量
	CALC_AMOUNT decimal(18, 3) ,
        --需求金额
	CALC_MONEY decimal(18, 3) ,
        --发货数量
	SHIP_AMOUNT decimal(18, 3) ,
        --备注
	REMARK varchar2 (100) ,
	CONSTRAINT PK_MKT_DEMANDDATA PRIMARY KEY  
	(
		TENANT_ID,
		DEMA_ID,
		SEQNO
	)
);

CREATE INDEX IX_M_DMA_TENANT_ID ON MKT_DEMANDDATA(TENANT_ID);
CREATE INDEX IX_M_DMA_DEMA_ID ON MKT_DEMANDDATA(TENANT_ID,DEMA_ID);
CREATE INDEX IX_M_DMA_GODS_ID ON MKT_DEMANDDATA(TENANT_ID,GODS_ID);

