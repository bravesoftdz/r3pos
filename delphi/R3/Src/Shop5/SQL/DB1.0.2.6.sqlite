update STO_STORAGE set AMOUNT=round(AMOUNT,3),AMONEY=round(AMONEY,6),COST_PRICE=round(COST_PRICE,6);

delete from PUB_PARAMS where CODE_ID='3' and TYPE_CODE='IS_PRESENT';
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('3','核销','IS_PRESENT','00',5497000);
--活动组定义
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('18','活动组','CODE_TYPE','00',5497000);

--市场活动
CREATE TABLE [MKT_ACTIVE_INFO] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --活动编号
	[ACTIVE_ID] char(36) NOT NULL ,
        --活动名称
	[ACTIVE_NAME] [varchar] (50) NOT NULL ,
        --拼音码
	[ACTIVE_SPELL] [varchar] (50) NOT NULL ,
        --活动分组-PUB_CODE_INFO.CODE_TYPE=17
	[ACTIVE_GROUP] [varchar] (36) NOT NULL ,
        --说明
	[REMARK] [varchar] (100) NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_ACTIVE_INFO_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_ACTIVE_INFO] PRIMARY KEY  
	(
		[TENANT_ID],
		[ACTIVE_ID]
	)
);


--BOM类型定义
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','散装礼盒','BOM_TYPE','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','整装礼盒','BOM_TYPE','00',5497000);
--BOM状态
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','启用','BOM_STATUS','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','禁用','BOM_STATUS','00',5497000);
--添加BOM类型
alter table SAL_BOMORDER add BOM_TYPE char(1) NULL;
alter table SAL_BOMORDER add BOM_STATUS char(1) NULL;
alter table SAL_BOMORDER add GODS_ID varchar(36) NULL;
alter table SAL_BOMORDER add DEPT_ID varchar(12) NULL;
alter table SAL_BOMORDER add HAS_INTEGRAL char(1) NULL;

--是否启动多档促销 0不启用 1启用
alter table SAL_PRICEDATA add USING_LEVEL char(1) NULL;
--档位类型 1按金额 2按销量 3按整单金额
alter table SAL_PRICEDATA add LVL_TYPE char(1) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV1_AMT decimal(18, 3) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV2_AMT decimal(18, 3) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV3_AMT decimal(18, 3) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV4_AMT decimal(18, 3) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV5_AMT decimal(18, 3) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV6_AMT decimal(18, 3) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV7_AMT decimal(18, 3) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV8_AMT decimal(18, 3) NULL;
--档位达标量
alter table SAL_PRICEDATA add LV9_AMT decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV1_PRC decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV2_PRC decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV3_PRC decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV4_PRC decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV5_PRC decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV6_PRC decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV7_PRC decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV8_PRC decimal(18, 3) NULL;
--档位优惠价
alter table SAL_PRICEDATA add LV9_PRC decimal(18, 3) NULL;

--商品简称
alter table PUB_GOODSINFO	add SHORT_GODS_NAME varchar(30) NULL;
alter table PUB_GOODS_RELATION add SHORT_GODS_NAME varchar(30) NULL;
--积分标准
alter table PUB_GOODSINFOEXT add ITGL_RATE decimal(18, 3) NULL;

update PUB_GOODSINFO set SHORT_GODS_NAME=GODS_NAME;


--指标类型
delete from PUB_PARAMS where TYPE_CODE='IDX_TYPE';
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','客户指标','IDX_TYPE','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('3','业绩指标','IDX_TYPE','00',5497000);

--考核类型
delete from PUB_PARAMS where TYPE_CODE='KPI_TYPE';
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','年度考核','KPI_TYPE','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','季度考核','KPI_TYPE','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('3','按时间段','KPI_TYPE','00',5497000);

drop table MKT_KPI_INDEX;
--考核指标
CREATE TABLE [MKT_KPI_INDEX] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --指标ID号
	[KPI_ID] char(36) NOT NULL ,
        --指标名称
	[KPI_NAME] [varchar] (50) NOT NULL ,
        --拼音码
	[KPI_SPELL] [varchar] (50) NOT NULL ,
        --指标类型
	[IDX_TYPE] [char] (1) NOT NULL ,
        --考核类型
	[KPI_TYPE] [char] (1) NOT NULL ,
        --显示单位
	[UNIT_NAME] [varchar] (10) NOT NULL ,
        --备注
	[REMARK] [varchar] (100) NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_KPI_INDEX_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_KPI_INDEX] PRIMARY KEY  
	(
		[TENANT_ID],
		[KPI_ID]
	)
);

CREATE INDEX IX_KPDX_TENANT_ID ON MKT_KPI_INDEX(TENANT_ID);

--商品清单用原结构
delete from MKT_KPI_GOODS;

--签约等级
CREATE TABLE [MKT_KPI_LEVEL] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --考核等级
	[LEVEL_ID] [char] (36) NOT NULL ,
        --等级名称
	[LEVEL_NAME] [varchar] (50) NOT NULL ,
        --所属指标
	[KPI_ID] [char] (36) NOT NULL ,
	      --签约量要求
	[LVL_AMT] [decimal](18, 3) NULL ,
	      --保底返利或计提系数 默认为0
	[LOW_RATE] [decimal](18, 3) NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_KPI_LEVEL_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_KPI_LEVEL] PRIMARY KEY 
	(
		[TENANT_ID],
		[LEVEL_ID]
	) 
);
CREATE INDEX IX_KPLV_TENANT_ID ON MKT_KPI_LEVEL(TENANT_ID);

--考核标准
delete from PUB_PARAMS where TYPE_CODE='KPI_DATA';
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','按销量完成率','KPI_DATA','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','按金额完成率','KPI_DATA','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('3','按销售额','KPI_DATA','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('4','按销售量','KPI_DATA','00',5497000);

--计算标准
delete from PUB_PARAMS where TYPE_CODE='KPI_CALC';
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','按百分率','KPI_CALC','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','按完成量','KPI_CALC','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('3','指定金额','KPI_CALC','00',5497000);

--返利设定
delete from PUB_PARAMS where TYPE_CODE='RATIO_TYPE';
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','拉通返利','RATIO_TYPE','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','按商品返','RATIO_TYPE','00',5497000);
--时段定义
CREATE TABLE [MKT_KPI_TIMES] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --考核等级
	[TIMES_ID] [char] (36) NOT NULL ,
        --所属指标
	[KPI_ID] [char] (36) NOT NULL ,
        --时段名（一季，上半年等）
	[TIMES_NAME] [varchar] (50) NOT NULL ,
        --序号
	[SEQNO] [int] NOT NULL ,
	      --考时段
	[KPI_DATE1] int NULL ,
	[KPI_DATE2] int NULL ,
	      --是否允许借量
	[USING_BRRW] char(1) NULL ,
	      --是否是为促销时段(只有年返有效)
	[KPI_FLAG] char(1) NULL ,
	      --考核标准
	[KPI_DATA] char(1) NULL ,
	      --计算标准
	[KPI_CALC] char(1) NULL ,
        --返利设定
	[RATIO_TYPE] [char] (1) NOT NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_KPI_TIMES_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_KPI_TIMES] PRIMARY KEY 
	(
		[TENANT_ID],
		[TIMES_ID]
	) 
);
CREATE INDEX IX_KPTM_TENANT_ID ON MKT_KPI_TIMES(TENANT_ID);

drop table MKT_KPI_OPTION;
--达标档位
CREATE TABLE [MKT_KPI_SEQNO] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --档位编号
	[SEQNO_ID] [char] (36) NOT NULL ,
        --考核指标
	[KPI_ID] [char] (36) NOT NULL ,
        --签约等级
	[LEVEL_ID] [char] (36) NOT NULL ,
        --返利时段
	[TIMES_ID] [char] (36) NOT NULL ,
        --档位系号，每个指标重 1 开始计数
	[SEQNO] [int] NOT NULL ,
	      --达标量/达标系数
	[KPI_AMT] [decimal](18, 3) NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_KPI_SEQNO_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_KPI_SEQNO] PRIMARY KEY 
	(
		[TENANT_ID],
		[SEQNO_ID]
	) 
);
CREATE INDEX IX_KPSQ_TENANT_ID ON MKT_KPI_SEQNO(TENANT_ID);

--返利系数
CREATE TABLE [MKT_KPI_RATIO] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --返利编号
	[RATIO_ID] [char] (36) NOT NULL ,
        --考核指标
	[KPI_ID] [char] (36) NOT NULL ,
        --签约等级
	[LEVEL_ID] [char] (36) NOT NULL ,
        --返利时段
	[TIMES_ID] [char] (36) NOT NULL ,
        --达标档位
	[SEQNO_ID] [char] (36) NOT NULL ,
        --返利商品
	[GODS_ID] [char] (36) NULL ,
        --返利单位
	[UNIT_ID] [char] (36) NULL ,
	      --返利系数
	[KPI_RATIO] [decimal](18, 3) NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_KPI_RATIO_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_KPI_RATIO] PRIMARY KEY 
	(
		[TENANT_ID],
		[RATIO_ID]
	) 
);
CREATE INDEX IX_KPRO_TENANT_ID ON MKT_KPI_RATIO(TENANT_ID);


--市场费计提
CREATE TABLE [MKT_ACTIVE_RATIO] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --计提编号
	[ACTR_ID] [char] (36) NOT NULL ,
        --考核指标
	[KPI_ID] [char] (36) NOT NULL ,
        --返利商品
	[GODS_ID] [char] (36) NULL ,
        --考核单位
	[UNIT_ID] [char] (36) NULL ,
	      --计提系数
	[ACTR_RATIO] [decimal](18, 3) NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_ACTIVE_RATIO_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_ACTIVE_RATIO] PRIMARY KEY 
	(
		[TENANT_ID],
		[ACTR_ID]
	) 
);
CREATE INDEX IX_ACTR_TENANT_ID ON MKT_ACTIVE_RATIO(TENANT_ID);

--预算金额
alter table MKT_PLANDATA add [BUDG_MNY] [decimal](18, 3) NULL;

--添加所属部门
alter table PUB_CUSTOMER add DEPT_ID varchar (12) NULL;
alter table PUB_CLIENTINFO add DEPT_ID varchar (12) NULL;

update PUB_CUSTOMER set DEPT_ID=TENANT_ID||'001';
update PUB_CLIENTINFO set DEPT_ID=TENANT_ID||'001';

drop table MKT_KPI_RESULT;
--考核结果
CREATE TABLE [MKT_KPI_RESULT] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --经销商
	[CLIENT_ID] [varchar] (36) NOT NULL ,
        --考核ID
	[KPI_ID] [char] (36) NOT NULL ,
        --年度
	[KPI_YEAR] int NOT NULL ,
        --门店代码
	[SHOP_ID] [varchar] (13) NOT NULL ,
        --所属部门
	[DEPT_ID] [varchar] (12) NOT NULL,
        --计划单号<有签约的有>
	[PLAN_ID] [char] (36) NULL ,
	
        --指标类型
	[IDX_TYPE] [char] (1) NOT NULL ,
        --考核类型
	[KPI_TYPE] [char] (1) NOT NULL ,
	
        --审核日期
	[CHK_DATE] [varchar] (10) NULL ,
        --审核人员
	[CHK_USER] [varchar] (36) NULL ,
	
        --签约销量
	[PLAN_AMT] [decimal](18, 3) NULL ,
        --签约金额 
	[PLAN_MNY] [decimal](18, 3) NULL ,
	
        --完成销量
	[FISH_AMT] [decimal](18, 3) NULL ,
        --调整销量
	[ADJS_AMT] [decimal](18, 3) NULL ,
        --完成金额 
	[FISH_MNY] [decimal](18, 3) NULL ,
        --调整金额
	[ADJS_MNY] [decimal](18, 3) NULL ,
	
        --返利结果
	[KPI_MNY] [decimal](18, 3) NULL ,
        --提取返利
	[WDW_MNY] [decimal](18, 3) NULL ,
	
	      --市场费预算
	[BUDG_MNY] [decimal](18, 3) NULL,
	      --市场费计提
	[BUDG_KPI] [decimal](18, 3) NULL,
	      --市场费申领
	[BUDG_WDW] [decimal](18, 3) NULL,
	      --市场费核销
	[BUDG_VRF] [decimal](18, 3) NULL,
	
        --备注
	[REMARK] [varchar] (100) NULL ,
        --操作时间
	[CREA_DATE] [varchar] (30) NULL ,
        --操作人员
	[CREA_USER] [varchar] (36) NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_KPI_RESULT_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_KPI_RESULT] PRIMARY KEY 
	(
		[TENANT_ID],[KPI_YEAR],[KPI_ID],[CLIENT_ID]
	) 
);

CREATE INDEX IX_MKPIR_TENANT_ID ON MKT_KPI_RESULT(TENANT_ID);
CREATE INDEX IX_MKPIR_TIME_STAMP ON MKT_KPI_RESULT(TENANT_ID,TIME_STAMP);
CREATE INDEX IX_MKPIR_KPI_YEAR ON MKT_KPI_RESULT(TENANT_ID,KPI_YEAR);
CREATE INDEX IX_MKPIR_KPI_ID ON MKT_KPI_RESULT(TENANT_ID,KPI_ID);
CREATE INDEX IX_MKPIR_CLIENT_ID ON MKT_KPI_RESULT(TENANT_ID,CLIENT_ID);
CREATE INDEX IX_MKPIR_DEPT_ID ON MKT_KPI_RESULT(TENANT_ID,DEPT_ID);
CREATE INDEX IX_MKPIR_SHOP_ID ON MKT_KPI_RESULT(TENANT_ID,SHOP_ID);

drop table MKT_KPI_RESULT_LIST;
--返利计算明细
CREATE TABLE [MKT_KPI_RESULT_LIST] (
        --行号
	[ROWS_ID] [varchar] (36) NOT NULL ,
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --经销商
	[CLIENT_ID] [varchar] (36) NOT NULL ,
        --考核ID
	[KPI_ID] [char] (36) NOT NULL ,
        --年  度
	[KPI_YEAR] int NOT NULL ,
	      --考时段
	[KPI_DATE1] int NULL ,
	[KPI_DATE2] int NULL ,
	      --考核标准
	[KPI_DATA] char(1) NULL ,
	      --计算标准
	[KPI_CALC] char(1) NULL ,
        --返利设定
	[RATIO_TYPE] [char] (1) NOT NULL ,
        --返利商品
	[GODS_ID] [char] (36) NULL ,
	      --完成签约量对应的等级
	[LVL_AMT] [decimal](18, 3) NULL ,
	      --完成率
	[KPI_RATE] [decimal](18, 3) NULL ,

        --完成销量<调整后结果=去销售表SUM()+ADJS_AMT>
	[FISH_AMT] [decimal](18, 3) NULL ,
        --转换成返利单位对应的系数
	[FISH_CALC_RATE] [decimal](18, 3) NULL ,
        --调整销量
	[ADJS_AMT] [decimal](18, 3) NULL ,
        --完成金额 
	[FISH_MNY] [decimal](18, 3) NULL ,
        --调整金额
	[ADJS_MNY] [decimal](18, 3) NULL ,

	      --返利系数
	[KPI_RATIO] [decimal](18, 3) NULL ,
	      --考核结果
	[KPI_MNY] [decimal](18, 3) NULL ,
	
	      --市场费计提系数
	[ACTR_RATIO] [decimal](18, 3) NULL ,
	      --市场费计提
	[BUDG_KPI] [decimal](18, 3) NULL,
	
	CONSTRAINT [PK_MKT_KPI_R_LIST] PRIMARY KEY 
	(
		[TENANT_ID],[ROWS_ID]
	) 
);

CREATE INDEX IX_MPRT_TENANT_ID ON MKT_KPI_RESULT_LIST(TENANT_ID);
CREATE INDEX IX_MPRT_KEYID ON MKT_KPI_RESULT_LIST(TENANT_ID,CLIENT_ID,KPI_ID,KPI_YEAR);
CREATE INDEX IX_MPRT_KPI_YEAR ON MKT_KPI_RESULT_LIST(KPI_YEAR);

delete from PUB_PARAMS where TYPE_CODE='INVOICE_STATUS';
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','开票','INVOICE_STATUS','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','作废','INVOICE_STATUS','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','未导出','EXPORT_STATUS','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','已导出','EXPORT_STATUS','00',5497000);
drop table SAL_INVOICE_BOOK;
--发票本管理
CREATE TABLE [SAL_INVOICE_BOOK] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --流水ID号
	[INVH_ID] [char] (36) NOT NULL ,
        --领用门店
	[SHOP_ID] [varchar] (13) NOT NULL ,
        --领用部门
	[DEPT_ID] [varchar] (12) NOT NULL ,
        --发票类型
	[INVOICE_FLAG] [varchar] (1) NULL ,
        --领用人
	[CREA_USER] int NOT NULL ,
        --领用日期
	[CREA_DATE] int NOT NULL ,
        --备注
	[REMARK] [varchar] (100) NULL ,
        --发票代码
	[INVH_NO] [varchar] (50) NOT NULL ,
        --发票起始号
	[BEGIN_NO] int NOT NULL ,
        --发票终止号
	[ENDED_NO] int NOT NULL ,
        --合计张数
	[TOTAL_AMT] int NULL ,
        --开票张数
	[USING_AMT] int NULL ,
        --作废张数
	[CANCEL_AMT] int NULL ,
        --结余张数
	[BALANCE] int NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_SAL_INVOICE_BOOK_COMM] DEFAULT ('00'),
        --时间戳 
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_SAL_INVOICE_BOOK] PRIMARY KEY   
	(
		[TENANT_ID],[INVH_ID]
	) 
);

CREATE INDEX IX_SAL_INVOICE_BOOK_TENANT_ID ON SAL_INVOICE_BOOK(TENANT_ID);
CREATE INDEX IX_SAL_INVOICE_BOOK_TIME_STAMP ON SAL_INVOICE_BOOK(TENANT_ID,TIME_STAMP);
CREATE INDEX IX_SAL_INVOICE_BOOK_CREA_DATE ON SAL_INVOICE_BOOK(CREA_DATE);
CREATE INDEX IX_SAL_INVOICE_BOOK_SHOP_ID ON SAL_INVOICE_BOOK(TENANT_ID,SHOP_ID);

drop table SAL_INVOICE_INFO;
--发票明细
CREATE TABLE [SAL_INVOICE_INFO] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --流水ID号
	[INVD_ID] [char] (36) NOT NULL ,
        --发票本号
	[INVH_ID] [char] (36) NULL ,
        --开票门店
	[SHOP_ID] [varchar] (13) NOT NULL ,
        --开票部门
	[DEPT_ID] [varchar] (12) NOT NULL ,
        --开票人
	[CREA_USER] [varchar] (36) NOT NULL ,
        --开票日期
	[CREA_DATE] int NOT NULL ,
        --客户编码
	[CLIENT_ID] [varchar] (36)  NOT NULL ,
        --开票名称
	[INVO_NAME] [varchar] (50)  NOT NULL ,
        --开票地址
	[ADDR_NAME] [varchar] (50)  NOT NULL ,
        --备注
	[REMARK] [varchar] (100) NULL ,
        --发票类型
	[INVOICE_FLAG] [varchar] (1) NULL ,
	      --发票号
	[INVOICE_NO] int NOT NULL ,
        --开票金额
	[INVOICE_MNY] [decimal](18, 3) NULL ,
        --发票状态
	[INVOICE_STATUS] [varchar] (1) NOT NULL ,
        --导出状态
	[EXPORT_STATUS] [varchar] (1) NOT NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_SAL_INVOICE_INFO_COMM] DEFAULT ('00'),
        --时间戳 
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_SAL_INVOICE_INFO] PRIMARY KEY   
	(
		[TENANT_ID],[INVD_ID]
	) 
);

CREATE INDEX IX_SAL_INVOICE_INFO_TENANT_ID ON SAL_INVOICE_INFO(TENANT_ID);
CREATE INDEX IX_SAL_INVOICE_INFO_TIME_STAMP ON SAL_INVOICE_INFO(TENANT_ID,TIME_STAMP);
CREATE INDEX IX_SAL_INVOICE_INFO_CREA_DATE ON SAL_INVOICE_INFO(CREA_DATE);

--发票明细
CREATE TABLE [SAL_INVOICE_LIST] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --发票流水ID号
	[INVD_ID] [char] (36) NOT NULL ,
        --销售流水ID号
	[SALES_ID] [char] (36) NOT NULL ,
	CONSTRAINT [PK_SAL_INVOICE_LIST] PRIMARY KEY   
	(
		[TENANT_ID],[INVD_ID],[SALES_ID]
	)
);
CREATE INDEX IX_SAL_INVOICE_LIST_SALES_ID ON SAL_INVOICE_LIST(TENANT_ID,SALES_ID);
CREATE INDEX IX_SAL_INVOICE_LIST_INVD_ID ON SAL_INVOICE_LIST(TENANT_ID,INVD_ID);

--企业经营商品视图,自经营商品+连锁商品    
drop view VIW_GOODSINFO;                                          
CREATE view VIW_GOODSINFO
as
select 1 as RELATION_FLAG,B.RELATION_ID,C.RELATI_ID as TENANT_ID,A.GODS_ID,
       B.GODS_CODE as SECOND_CODE,B.SECOND_ID,B.COMM_ID,
       BARCODE,UNIT_ID,CALC_UNITS,SMALL_UNITS,BIG_UNITS,SMALLTO_CALC,BIGTO_CALC,
       ifnull(B.GODS_CODE,A.GODS_CODE) as GODS_CODE,GODS_TYPE,
       ifnull(B.GODS_NAME,A.GODS_NAME) as GODS_NAME,
       ifnull(B.SHORT_GODS_NAME,A.SHORT_GODS_NAME) as SHORT_GODS_NAME,
       ifnull(B.GODS_SPELL,A.GODS_SPELL) as GODS_SPELL,
       ifnull(B.SORT_ID1,A.SORT_ID1) as SORT_ID1,
       ifnull(B.SORT_ID2,A.SORT_ID2) as SORT_ID2,
       ifnull(B.SORT_ID3,A.SORT_ID3) as SORT_ID3,
       ifnull(B.SORT_ID4,A.SORT_ID4) as SORT_ID4,
       ifnull(B.SORT_ID5,A.SORT_ID5) as SORT_ID5,
       ifnull(B.SORT_ID6,A.SORT_ID6) as SORT_ID6,
       ifnull(B.SORT_ID7,A.SORT_ID7) as SORT_ID7,
       ifnull(B.SORT_ID8,A.SORT_ID8) as SORT_ID8,
       ifnull(B.SORT_ID9,A.SORT_ID9) as SORT_ID9,
       ifnull(B.SORT_ID10,A.SORT_ID10) as SORT_ID10,
       ifnull(B.SORT_ID11,A.SORT_ID11) as SORT_ID11,
       ifnull(B.SORT_ID12,A.SORT_ID12) as SORT_ID12,
       ifnull(B.SORT_ID13,A.SORT_ID13) as SORT_ID13,
       ifnull(B.SORT_ID14,A.SORT_ID14) as SORT_ID14,
       ifnull(B.SORT_ID15,A.SORT_ID15) as SORT_ID15,
       ifnull(B.SORT_ID16,A.SORT_ID16) as SORT_ID16,
       ifnull(B.SORT_ID17,A.SORT_ID17) as SORT_ID17,
       ifnull(B.SORT_ID18,A.SORT_ID18) as SORT_ID18,
       ifnull(B.SORT_ID19,A.SORT_ID19) as SORT_ID19,
       ifnull(B.SORT_ID20,A.SORT_ID20) as SORT_ID20,
       ifnull(B.NEW_INPRICE,A.NEW_INPRICE) as NEW_INPRICE,
       ifnull(B.NEW_OUTPRICE,A.NEW_OUTPRICE) as NEW_OUTPRICE,
       ifnull(B.NEW_LOWPRICE,A.NEW_LOWPRICE) as NEW_LOWPRICE,
       ifnull(B.USING_BARTER,A.USING_BARTER) as USING_BARTER,
       ifnull(B.BARTER_INTEGRAL,A.BARTER_INTEGRAL) as BARTER_INTEGRAL,
       ifnull(B.USING_PRICE,A.USING_PRICE) as USING_PRICE,
       ifnull(B.HAS_INTEGRAL,A.HAS_INTEGRAL) as HAS_INTEGRAL,
       ifnull(B.USING_BATCH_NO,A.USING_BATCH_NO) as USING_BATCH_NO,
       ifnull(B.USING_LOCUS_NO,A.USING_LOCUS_NO) as USING_LOCUS_NO,
       REMARK,'#' as PRICE_ID,A.COMM,ifnull(B.ZOOM_RATE,1.000) as ZOOM_RATE,A.TIME_STAMP
from PUB_GOODSINFO A,PUB_GOODS_RELATION B,CA_RELATIONS C
where A.GODS_ID=B.GODS_ID and B.RELATION_ID=C.RELATION_ID and  
( (B.TENANT_ID=C.TENANT_ID  and C.RELATION_TYPE<>'1')
  or
  (B.TENANT_ID=C.RELATI_ID  and C.RELATION_TYPE='1')
)
and B.COMM not in ('02','12') and C.COMM not in ('02','12') and C.RELATION_STATUS='2'
union all
select 2 as RELATION_FLAG,0 as RELATION_ID,TENANT_ID,GODS_ID,
       GODS_CODE as SECOND_CODE,GODS_ID as SECOND_ID,GODS_ID as COMM_ID,
       BARCODE,UNIT_ID,CALC_UNITS,SMALL_UNITS,BIG_UNITS,SMALLTO_CALC,BIGTO_CALC,
       GODS_CODE,GODS_TYPE,GODS_NAME,SHORT_GODS_NAME,GODS_SPELL,
       SORT_ID1,SORT_ID2,SORT_ID3,SORT_ID4,SORT_ID5,SORT_ID6,SORT_ID7,SORT_ID8,
       SORT_ID9,SORT_ID10,SORT_ID11,SORT_ID12,SORT_ID13,SORT_ID14,SORT_ID15,SORT_ID16,
       SORT_ID17,SORT_ID18,SORT_ID19,SORT_ID20,
       NEW_INPRICE,NEW_OUTPRICE,NEW_LOWPRICE,
       USING_BARTER,BARTER_INTEGRAL,
       USING_PRICE,HAS_INTEGRAL,USING_BATCH_NO,USING_LOCUS_NO,REMARK,'#' as PRICE_ID,COMM,1.000 as ZOOM_RATE,TIME_STAMP
from PUB_GOODSINFO;

--各商品在企业总部的价格<售价>，不分门店
drop view VIW_GOODSINFOEXT;                                          
CREATE view [VIW_GOODSINFOEXT]
as
select A.[TENANT_ID],A.[RELATION_ID],
       A.PRICE_ID,A.[GODS_ID],A.[GODS_CODE],A.[SECOND_ID] as SECOND_ID,A.[GODS_NAME],A.[SHORT_GODS_NAME],A.[GODS_SPELL],A.[GODS_TYPE],
       A.[SORT_ID1],A.[SORT_ID2],A.[SORT_ID3],A.[SORT_ID4],A.[SORT_ID5],A.[SORT_ID6],A.[SORT_ID7],A.[SORT_ID8],
       A.[SORT_ID9],A.[SORT_ID10],A.[SORT_ID11],A.[SORT_ID12],A.[SORT_ID13],A.[SORT_ID14],A.[SORT_ID15],A.[SORT_ID16],
       A.[SORT_ID17],A.[SORT_ID18],A.[SORT_ID19],A.[SORT_ID20],
       A.[BARCODE],A.[UNIT_ID],A.[CALC_UNITS],A.[SMALL_UNITS],A.[BIG_UNITS],A.[SMALLTO_CALC],A.[BIGTO_CALC],A.[NEW_INPRICE],A.[NEW_OUTPRICE] as RTL_OUTPRICE,
       1 as POLICY_TYPE,
       case when ifnull(B.COMM,'02') not in ('02','12') then B.[NEW_OUTPRICE] else A.[NEW_OUTPRICE] end NEW_OUTPRICE,
       case when ifnull(B.COMM,'02') not in ('02','12') then ifnull(B.[NEW_OUTPRICE1],B.[NEW_OUTPRICE]*A.SMALLTO_CALC) else A.[NEW_OUTPRICE]*A.SMALLTO_CALC end NEW_OUTPRICE1,
       case when ifnull(B.COMM,'02') not in ('02','12') then ifnull(B.[NEW_OUTPRICE2],B.[NEW_OUTPRICE]*A.BIGTO_CALC) else A.[NEW_OUTPRICE]*A.BIGTO_CALC end NEW_OUTPRICE2,
       A.[NEW_LOWPRICE],A.[USING_BARTER],A.[BARTER_INTEGRAL],
       A.[USING_PRICE],A.[HAS_INTEGRAL],A.[USING_BATCH_NO],A.[USING_LOCUS_NO],A.[REMARK],A.[COMM],A.ZOOM_RATE,A.[TIME_STAMP]
from VIW_GOODSINFO A left join PUB_GOODSPRICE B ON A.TENANT_ID=B.TENANT_ID and A.GODS_ID=B.GODS_ID and cast(A.TENANT_ID as varchar)||'0001'=B.SHOP_ID and A.PRICE_ID=B.PRICE_ID;

--每个门店都有记录，关联需加门店
--各商品价格
drop view VIW_GOODSPRICE;                                          
CREATE view [VIW_GOODSPRICE]
as
select A.[TENANT_ID],A.[RELATION_ID],C.SHOP_ID,
       A.PRICE_ID,A.[GODS_ID],A.[GODS_CODE],A.[SECOND_ID] as SECOND_ID,A.[GODS_NAME],A.[SHORT_GODS_NAME],A.[GODS_SPELL],A.[GODS_TYPE],
       A.[SORT_ID1],A.[SORT_ID2],A.[SORT_ID3],A.[SORT_ID4],A.[SORT_ID5],A.[SORT_ID6],A.[SORT_ID7],A.[SORT_ID8],
       A.[SORT_ID9],A.[SORT_ID10],A.[SORT_ID11],A.[SORT_ID12],A.[SORT_ID13],A.[SORT_ID14],A.[SORT_ID15],A.[SORT_ID16],
       A.[SORT_ID17],A.[SORT_ID18],A.[SORT_ID19],A.[SORT_ID20],
       A.[BARCODE],A.[UNIT_ID],A.[CALC_UNITS],A.[SMALL_UNITS],A.[BIG_UNITS],A.[SMALLTO_CALC],A.[BIGTO_CALC],A.[NEW_INPRICE],A.RTL_OUTPRICE,
       case when ifnull(B.COMM,'02') not in ('02','12') then 2 else 1 end as POLICY_TYPE,
       case when ifnull(B.COMM,'02') not in ('02','12') then B.[NEW_OUTPRICE] else A.[NEW_OUTPRICE] end NEW_OUTPRICE,
       case when ifnull(B.COMM,'02') not in ('02','12') then ifnull(B.[NEW_OUTPRICE1],B.[NEW_OUTPRICE]*A.SMALLTO_CALC) else A.[NEW_OUTPRICE]*A.SMALLTO_CALC end NEW_OUTPRICE1,
       case when ifnull(B.COMM,'02') not in ('02','12') then ifnull(B.[NEW_OUTPRICE2],B.[NEW_OUTPRICE]*A.BIGTO_CALC) else A.[NEW_OUTPRICE]*A.BIGTO_CALC end NEW_OUTPRICE2,
       A.[NEW_LOWPRICE],A.[USING_BARTER],A.[BARTER_INTEGRAL],
       A.[USING_PRICE],A.[HAS_INTEGRAL],A.[USING_BATCH_NO],A.[USING_LOCUS_NO],A.[REMARK],A.[COMM],A.ZOOM_RATE,A.[TIME_STAMP]
from VIW_GOODSINFOEXT A inner join CA_SHOP_INFO C on A.TENANT_ID=C.TENANT_ID
left join PUB_GOODSPRICE B ON C.SHOP_ID=B.SHOP_ID and A.TENANT_ID=B.TENANT_ID and A.GODS_ID=B.GODS_ID and A.PRICE_ID=B.PRICE_ID;

--每个门店都有记录，关联需加门店
drop view VIW_GOODSPRICEEXT;                                          
CREATE view [VIW_GOODSPRICEEXT]
as
    SELECT 
      j1.TENANT_ID as TENANT_ID,j1.SHOP_ID,j1.RELATION_ID, 
      j1.GODS_ID as GODS_ID,GODS_CODE,j1.GODS_TYPE,BARCODE,GODS_SPELL,GODS_NAME,SHORT_GODS_NAME,UNIT_ID,CALC_UNITS,SMALL_UNITS,BIG_UNITS,SMALLTO_CALC,BIGTO_CALC,
       case when J2.NEW_INPRICE is null then J1.NEW_INPRICE else J2.NEW_INPRICE end as NEW_INPRICE,
       case when J2.NEW_INPRICE is null then J1.NEW_INPRICE*J1.SMALLTO_CALC else J2.NEW_INPRICE1 end as NEW_INPRICE1,
       case when J2.NEW_INPRICE is null then J1.NEW_INPRICE*J1.BIGTO_CALC else J2.NEW_INPRICE2 end as NEW_INPRICE2,
       NEW_OUTPRICE,
       NEW_OUTPRICE1,
       NEW_OUTPRICE2,
       NEW_LOWPRICE,
       J1.RTL_OUTPRICE as RTL_OUTPRICE,
       SORT_ID1,SORT_ID2,SORT_ID3,SORT_ID4,SORT_ID5,SORT_ID6,SORT_ID7,SORT_ID8,
       SORT_ID9,SORT_ID10,SORT_ID11,SORT_ID12,SORT_ID13,SORT_ID14,SORT_ID15,SORT_ID16,
       SORT_ID17,SORT_ID18,SORT_ID19,SORT_ID20,
       USING_BARTER,BARTER_INTEGRAL,j2.ITGL_RATE
       USING_PRICE,HAS_INTEGRAL,USING_BATCH_NO,USING_LOCUS_NO,REMARK,j1.COMM as COMM,j1.ZOOM_RATE,j1.TIME_STAMP as TIME_STAMP
    FROM 
      VIW_GOODSPRICE j1 LEFT JOIN 
      PUB_GOODSINFOEXT j2 ON j1.TENANT_ID = j2.TENANT_ID AND j1.GODS_ID = j2.GODS_ID; 
            
--每个门店都有记录，关联需加门店
drop view VIW_GOODSPRICE_SORTEXT;                                          
CREATE view [VIW_GOODSPRICE_SORTEXT]
as
    SELECT 
      j1.*,j2.LEVEL_ID,j2.SORT_NAME
    FROM 
      VIW_GOODSPRICEEXT j1 LEFT JOIN 
      VIW_GOODSSORT j2 ON j1.TENANT_ID = j2.TENANT_ID AND j1.SORT_ID1 = j2.SORT_ID and j1.RELATION_ID=j2.RELATION_ID; 
      
--商品分类视图不分门店
drop view VIW_GOODSINFO_SORTEXT;                                          
CREATE view [VIW_GOODSINFO_SORTEXT]
as
    SELECT 
      j1.*,j2.LEVEL_ID,j2.SORT_NAME
    FROM 
      VIW_GOODSINFO j1 LEFT JOIN 
      VIW_GOODSSORT j2 ON j1.TENANT_ID = j2.TENANT_ID AND j1.SORT_ID1 = j2.SORT_ID and j1.RELATION_ID=j2.RELATION_ID; 

--记事本目录
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('19','记事本目录','CODE_TYPE','00',5497000);

insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','私秘','NB_TYPE','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','共享','NB_TYPE','00',5497000);

--我的记事本
CREATE TABLE [OA_NOTEBOOK] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --行编号
	[ROWS_ID] char(36) NOT NULL ,
        --类型
	[NB_TYPE] char(1) NOT NULL ,
        --日期
	[NB_DATE] int NOT NULL ,
        --序号
	[NB_SEQNO] int NOT NULL ,
        --用户
	[USER_ID] char(36) NOT NULL ,
        --分类
	[NB_GROUP] [varchar] (36) NOT NULL ,
        --标题
	[NB_TITLE] [varchar] (50) NOT NULL ,
        --内容
	[NB_TEXT] [varchar] (255) NOT NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_OA_NOTEBOOK_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_OA_NOTEBOOK_INFO] PRIMARY KEY  
	(
		[TENANT_ID],
		[ROWS_ID]
	)
);

CREATE INDEX IX_OANB_TENANT_ID ON OA_NOTEBOOK(TENANT_ID);
CREATE INDEX IX_OANB_USER_ID ON OA_NOTEBOOK(USER_ID);
CREATE INDEX IX_OANB_NB_DATE ON OA_NOTEBOOK(NB_DATE);

--返还类型
delete from PUB_PARAMS where TYPE_CODE='REQU_TYPE';
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('1','商品返还','REQU_TYPE','00',5497000);
insert into PUB_PARAMS(CODE_ID,CODE_NAME,TYPE_CODE,COMM,TIME_STAMP) values('2','现金返还','REQU_TYPE','00',5497000);

drop table MKT_REQUORDER;
--费用申领单
CREATE TABLE [MKT_REQUORDER] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --门店代码
	[SHOP_ID] [varchar] (13) NOT NULL ,
        --单号
	[REQU_ID] [char] (36) NOT NULL ,
        --所属部门
	[DEPT_ID] varchar (12) NOT NULL ,
        --返还类型
	[REQU_TYPE] [char] (36) NOT NULL ,
        --流水号
	[GLIDE_NO] [varchar] (20) NOT NULL ,
        --填报日期
	[REQU_DATE] int NOT NULL ,
        --经销商
	[CLIENT_ID] [varchar] (36) NOT NULL ,
        --填报人
	[REQU_USER] [varchar] (36) NULL ,
        --审核日期
	[CHK_DATE] [varchar] (10) NULL ,
        --审核人员
	[CHK_USER] [varchar] (36) NULL ,
        --返利金额
	[KPI_MNY] [decimal](18, 3) NULL ,
        --市场费用
	[BUDG_MNY] [decimal](18, 3) NULL ,
        --价格支持
	[AGIO_MNY] [decimal](18, 3) NULL ,
        --其他金额
	[OTHR_MNY] [decimal](18, 3) NULL ,
        --备注
	[REMARK] [varchar] (100) NULL ,
        --操作时间
	[CREA_DATE] [varchar] (30) NULL ,
        --操作人员
	[CREA_USER] [varchar] (36) NULL ,
        --通讯标志
	[COMM] [varchar] (2) NOT NULL CONSTRAINT [DF_MKT_REQUORDER_COMM] DEFAULT ('00'),
        --时间戳 当前系统日期*86400000
  [TIME_STAMP] bigint NOT NULL,
	CONSTRAINT [PK_MKT_REQUORDER] PRIMARY KEY 
	(
		[TENANT_ID],
		[REQU_ID]
	) 
);

CREATE INDEX IX_MRQD_TENANT_ID ON MKT_REQUORDER(TENANT_ID);
CREATE INDEX IX_MRQD_TIME_STAMP ON MKT_REQUORDER(TENANT_ID,TIME_STAMP);
CREATE INDEX IX_MRQD_DEMA_DATE ON MKT_REQUORDER(REQU_DATE);

drop table MKT_REQUDATA;
--费用申领明细
CREATE TABLE [MKT_REQUDATA] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --门店代码
	[SHOP_ID] [varchar] (13) NOT NULL ,
        --序号
	[SEQNO] [int] NOT NULL ,
        --单号
	[REQU_ID] [char] (36) NOT NULL ,
        --计划单号
	[PLAN_ID] [char] (36) NOT NULL ,
        --考核ID
	[KPI_ID] [char] (36) NOT NULL ,
        --年度
	[KPI_YEAR] int NULL ,
        --返利金额
	[KPI_MNY] [decimal](18, 3) NULL ,
        --市场费用
	[BUDG_MNY] [decimal](18, 3) NULL ,
        --价格支持
	[AGIO_MNY] [decimal](18, 3) NULL ,
        --其他金额
	[OTHR_MNY] [decimal](18, 3) NULL ,
        --摘要
	[REMARK] [varchar] (100) NULL ,
	CONSTRAINT [PK_MKT_REQUDATA] PRIMARY KEY  
	(
		[TENANT_ID],
		[REQU_ID],
		[SEQNO]
	)
);

CREATE INDEX IX_M_RQR_TENANT_ID ON MKT_REQUDATA(TENANT_ID);
CREATE INDEX IX_M_RQR_REQU_ID ON MKT_REQUDATA(TENANT_ID,REQU_ID);
CREATE INDEX IX_M_RQR_KPI_ID ON MKT_REQUDATA(TENANT_ID,PLAN_ID,KPI_YEAR,KPI_ID);
CREATE INDEX IX_M_RQR_KPI_YEAR ON MKT_REQUDATA(TENANT_ID,KPI_YEAR);

--费用分摊明细
CREATE TABLE [MKT_REQUSHARE] (
        --企业代码
	[TENANT_ID] int NOT NULL ,
        --门店代码
	[SHOP_ID] [varchar] (13) NOT NULL ,
        --序号
	[SEQNO] [int] NOT NULL ,
        --单号
	[REQU_ID] [char] (36) NOT NULL ,
        --商品
	[GODS_ID] [char] (36) NOT NULL ,
	      --单价
	[UNIT_ID] [char] (36) NOT NULL ,
        --返还数量
	[AMOUNT] [decimal](18, 3) NULL ,
        --返还数量
	[CALC_AMOUNT] [decimal](18, 3) NULL ,
        --返利金额
	[KPI_MNY] [decimal](18, 3) NULL ,
        --市场费用
	[BUDG_MNY] [decimal](18, 3) NULL ,
        --价格支持
	[AGIO_MNY] [decimal](18, 3) NULL ,
        --其他金额
	[OTHR_MNY] [decimal](18, 3) NULL ,
        --摘要
	[REMARK] [varchar] (100) NULL ,
	CONSTRAINT [PK_MKT_REQUSHARE] PRIMARY KEY  
	(
		[TENANT_ID],
		[REQU_ID],
		[SEQNO]
	)
);

CREATE INDEX IX_MRSR_TENANT_ID ON MKT_REQUSHARE(TENANT_ID);
CREATE INDEX IX_MRSR_REQU_ID ON MKT_REQUSHARE(TENANT_ID,REQU_ID);
CREATE INDEX IX_MRSR_KPI_ID ON MKT_REQUSHARE(TENANT_ID,GODS_ID);

--添加附件
alter table SAL_INDENTORDER add ATTH_ID varchar(39) NULL;