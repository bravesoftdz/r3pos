
--建临时表
CREATE TABLE TMP_STOCKS_DATA 
( 
	ID integer PRIMARY KEY autoincrement , 
	TENANT_ID int NOT NULL , 
	SHOP_ID varchar (13) NOT NULL , 
	BILL_ID char (36) NOT NULL , 
	BILL_CODE varchar (20) NULL , 
	BILL_TYPE int NOT NULL , 
	BILL_NAME varchar (10) NULL , 
	BILL_DATE int NOT NULL , 
	SEQNO int NOT NULL , 
	SEQNO_1 int NOT NULL , 
	GODS_ID char (36) NOT NULL , 
	CLIENT_ID varchar (36) NOT NULL , 
	UNIT_ID varchar (36) NOT NULL , 
	CONV_RATE decimal(18, 3) NOT NULL , 
  BATCH_NO varchar (36) NOT NULL , 
  PROPERTY_01 varchar (36) NOT NULL , 
  PROPERTY_02 varchar (36) NOT NULL , 
	IN_AMOUNT decimal(18, 3) NOT NULL DEFAULT 0, 
	IN_PRICE  decimal(18, 6) NOT NULL DEFAULT 0, 
	IN_MONEY  decimal(18, 3) NOT NULL DEFAULT 0, 
	IN_TAX  decimal(18, 3) NOT NULL DEFAULT 0, 
  OUT_AMOUNT decimal(18, 3) NOT NULL DEFAULT 0, 
  OUT_PRICE decimal(18, 6) NOT NULL DEFAULT 0, 
  OUT_MONEY decimal(18, 3) NOT NULL DEFAULT 0, 
  SALE_PRICE decimal(18, 6) NOT NULL DEFAULT 0, 
  SALE_MONEY decimal(18, 3) NOT NULL DEFAULT 0, 
  SALE_TAX decimal(18, 3) NOT NULL DEFAULT 0, 
  BAL_AMOUNT decimal(18, 3) NOT NULL DEFAULT 0, 
  BAL_PRICE decimal(18, 6) NOT NULL DEFAULT 0, 
  BAL_MONEY decimal(18, 3) NOT NULL DEFAULT 0, 
	GUIDE_USER varchar (36) NULL , 
	CREA_USER varchar (36) NULL 
)

--期初
insert into TMP_STOCKS_DATA
(TENANT_ID,SHOP_ID,BILL_ID,BILL_TYPE,BILL_NAME,BILL_DATE,SEQNO,SEQNO_1,
 GODS_ID,CLIENT_ID,UNIT_ID,CONV_RATE,BATCH_NO,PROPERTY_01,PROPERTY_02,
 BAL_AMOUNT,BAL_PRICE,BAL_MONEY) 
select 
  A.TENANT_ID,A.SHOP_ID,'#' as BILL_ID,0 as BILL_TYPE,'期初',A.BILL_DATE,A.SEQNO,0 as SEQNO_1,A.GODS_ID,'#' as CLIENT_ID,A.UNIT_ID,A.CONV_RATE,A.BATCH_NO,A.PROPERTY_01,A.PROPERTY_02,
  A.BAL_AMOUNT,A.BAL_PRICE,A.BAL_MONEY
from TMP_STOCKS_DATA A,
  (select max(SEQNO) as SEQNO,SHOP_ID,GODS_ID,BATCH_NO,PROPERTY_01,PROPERTY_02 
   from TMP_STOCKS_DATA 
   group by SHOP_ID,GODS_ID,BATCH_NO,PROPERTY_01,PROPERTY_02
  ) B
where
  A.SHOP_ID=B.SHOP_ID and
  A.GODS_ID=B.GODS_ID and
  A.BATCH_NO=B.BATCH_NO and
  A.PROPERTY_01=B.PROPERTY_01 and
  A.PROPERTY_02=B.PROPERTY_02 and 
  A.SEQNO=B.SEQNO

--进货
insert into TMP_STOCKS_DATA
(TENANT_ID,SHOP_ID,BILL_ID,BILL_CODE,BILL_TYPE,BILL_NAME,BILL_DATE,SEQNO,
 GODS_ID,CLIENT_ID,UNIT_ID,CONV_RATE,BATCH_NO,PROPERTY_01,PROPERTY_02,
 IN_AMOUNT,IN_PRICE,IN_MONEY,IN_TAX) 
select A.TENANT_ID,A.SHOP_ID,A.STOCK_ID,A.GLIDE_NO,A.STOCK_TYPE+10,
 case when A.STOCK_TYPE=1 then '进货' when A.STOCK_TYPE=2 then '调入' when A.STOCK_TYPE=3 then '退出' else '入库' end as BILL_NAME,A.STOCK_DATE,1 as SEQNO,
 A.GODS_ID,A.CLIENT_ID,A.UNIT_ID,cast(A.CALC_AMOUNT as decimal(18,3)) / cast(A.AMOUNT as decimal(18,3)) as CONV_RATE,A.BATCH_NO,A.PROPERTY_01,A.PROPERTY_02,
 A.CALC_AMOUNT as IN_AMOUNT,round(cast(A.NOTAX_MONEY as decimal(18,3)) / cast(A.CALC_AMOUNT as decimal(18,3)),6) as IN_PRICE,A.NOTAX_MONEY as IN_MONEY,A.TAX_MONEY as IN_TAX,
 A.GUIDE_USER,A.CREA_USER
from VIW_STOCKDATA A
where A.TENANT_ID=:TENANT_ID and A.STOCK_DATE>=:D1 and A.STOCK_DATE<=:D2 
order by A.GODS_ID,A.STOCK_DATE,A.CREA_DATE
--销售
insert into TMP_STOCKS_DATA
(TENANT_ID,SHOP_ID,BILL_ID,BILL_CODE,BILL_TYPE,BILL_NAME,BILL_DATE,SEQNO,
 GODS_ID,CLIENT_ID,UNIT_ID,CONV_RATE,BATCH_NO,PROPERTY_01,PROPERTY_02,
 OUT_AMOUNT,OUT_PRICE,OUT_MONEY,SALE_PRICE,SALE_MONEY,SALE_TAX,
 GUIDE_USER,CREA_USER) 
select A.TENANT_ID,A.SHOP_ID,A.SALES_ID,A.GLIDE_NO,A.SALES_TYPE+20,
 case when A.SALES_TYPE=1 then '销售' when A.SALES_TYPE=2 then '调出' when A.SALES_TYPE=3 then '退入' else '出库' end as BILL_NAME,A.SALES_DATE,1 as SEQNO,
 A.GODS_ID,A.CLIENT_ID,A.UNIT_ID,cast(A.CALC_AMOUNT as decimal(18,3)) / cast(A.AMOUNT as decimal(18,3)) as CONV_RATE,A.BATCH_NO,A.PROPERTY_01,A.PROPERTY_02,
 A.CALC_AMOUNT as OUT_AMOUNT,0 as OUT_PRICE,0 as OUT_MONEY,round(cast(A.NOTAX_MONEY as decimal(18,3)) / cast(A.CALC_AMOUNT as decimal(18,3)),6) as SALE_PRICE,A.NOTAX_MONEY as SALE_MONEY,A.TAX_MONEY as SALE_TAX,
 A.GUIDE_USER,A.CREA_USER
from VIW_SALESDATA A
where A.TENANT_ID=:TENANT_ID and A.SALES_DATE>=:D1 and A.SALES_DATE<=:D2 
order by A.GODS_ID,A.SALES_DATE,A.CREA_DATE
--盘点
insert into TMP_STOCKS_DATA
(TENANT_ID,SHOP_ID,BILL_ID,BILL_CODE,BILL_TYPE,BILL_NAME,BILL_DATE,SEQNO,
 GODS_ID,CLIENT_ID,UNIT_ID,CONV_RATE,BATCH_NO,PROPERTY_01,PROPERTY_02,
 OUT_AMOUNT,GUIDE_USER,CREA_USER) 
select A.TENANT_ID,A.SHOP_ID,A.CHANGE_ID,A.GLIDE_NO,cast(A.CHANGE_CODE as int)+30,
 case when cast(A.CHANGE_CODE as int)=1 then '损益' when cast(A.CHANGE_CODE as int)=2 then '领用' else '出库' end as BILL_NAME,A.CHANGE_DATE,1 as SEQNO,
 A.GODS_ID,'#',A.UNIT_ID,cast(A.CALC_AMOUNT as decimal(18,3)) / cast(A.AMOUNT as decimal(18,3)) as CONV_RATE,A.BATCH_NO,A.PROPERTY_01,A.PROPERTY_02,
 A.CALC_AMOUNT as OUT_AMOUNT,A.DUTY_USER,A.CREA_USER
from VIW_CHANGEDATA A
where A.TENANT_ID=:TENANT_ID and A.CHANGE_DATE>=:D1 and A.CHANGE_DATE<=:D2 
order by A.GODS_ID,A.CHANGE_DATE,A.CREA_DATE

--算系号
update TMP_STOCKS_DATA set 
SEQNO=(select ifnull(max(SEQNO),0) from TMP_STOCKS_DATA B 
where 
  B.SHOP_ID=TMP_STOCKS_DATA.SHOP_ID and 
  B.GODS_ID=TMP_STOCKS_DATA.GODS_ID and 
  B.BATCH_NO=TMP_STOCKS_DATA.BATCH_NO and 
  B.PROPERTY_01=TMP_STOCKS_DATA.PROPERTY_01 and 
  B.PROPERTY_02=TMP_STOCKS_DATA.PROPERTY_02 and 
  B.ID<TMP_STOCKS_DATA.ID
)+2, 
SEQNO_1=(select count(distinct BILL_DATE) from TMP_STOCKS_DATA B 
where 
  B.GODS_ID=TMP_STOCKS_DATA.GODS_ID and 
  B.BATCH_NO=TMP_STOCKS_DATA.BATCH_NO and 
  B.BILL_DATE<TMP_STOCKS_DATA.BILL_DATE and
  B.BILL_TYPE<>0
)+1  
where BILL_TYPE<>0  
  
--算结余
update MY_STOCKS_DATA set 
BAL_AMOUNT=(select ifnull(max(B.BAL_AMOUNT),0)  
from MY_STOCKS_DATA B 
where 
  B.SHOP_ID=MY_STOCKS_DATA.SHOP_ID and 
  B.GODS_ID=MY_STOCKS_DATA.GODS_ID and 
  B.BATCH_NO=MY_STOCKS_DATA.BATCH_NO and 
  B.PROPERTY_01=MY_STOCKS_DATA.PROPERTY_01 and 
  B.PROPERTY_02=MY_STOCKS_DATA.PROPERTY_02 and 
  B.SEQNO=MY_STOCKS_DATA.SEQNO-1
) + IN_AMOUNT - OUT_AMOUNT where BILL_TYPE<>0
  
          
--建成本临时表
CREATE TABLE TMP_STOCKS_CALC 
( 
	SEQNO_1 int NOT NULL , 
	GODS_ID char (36) NOT NULL , 
  BATCH_NO varchar (36) NOT NULL , 
	IN_AMOUNT decimal(18, 3) NOT NULL DEFAULT 0, 
	IN_PRICE  decimal(18, 6) NOT NULL DEFAULT 0, 
	IN_MONEY  decimal(18, 3) NOT NULL DEFAULT 0, 
  OUT_AMOUNT decimal(18, 3) NOT NULL DEFAULT 0, 
  OUT_PRICE decimal(18, 6) NOT NULL DEFAULT 0, 
  OUT_MONEY decimal(18, 3) NOT NULL DEFAULT 0, 
  BAL_AMOUNT decimal(18, 3) NOT NULL DEFAULT 0, 
  BAL_PRICE decimal(18, 6) NOT NULL DEFAULT 0, 
  BAL_MONEY decimal(18, 3) NOT NULL DEFAULT 0 
)

insert into TMP_STOCKS_CALC
select SEQNO_1,GODS_ID,BATCH_NO,sum(IN_AMOUNT),sum(IN_MONEY),sum(OUT_AMOUNT),sum(OUT_MONEY),
sum(case when BILL_TYPE=0 then BAL_AMOUNT else 0 end),
case when sum(case when BILL_TYPE=0 then BAL_AMOUNT else 0 end)<>0 then sum(case when BILL_TYPE=0 then BAL_MONEY else 0 end)/ sum(case when BILL_TYPE=0 then BAL_AMOUNT else 0 end) else 0 end ,
sum(case when BILL_TYPE=0 then BAL_MONEY else 0 end) from MY_STOCKS_DATA
group by SEQNO_1,GODS_ID,BATCH_NO 


update TMP_STOCKS_CALC set 
BAL_AMOUNT=(select ifnull(max(B.BAL_AMOUNT),0)  
from TMP_STOCKS_CALC B 
where 
  B.GODS_ID=TMP_STOCKS_CALC.GODS_ID and 
  B.BATCH_NO=TMP_STOCKS_CALC.BATCH_NO and 
  B.SEQNO_1=TMP_STOCKS_CALC.SEQNO_1-1
) + IN_AMOUNT - OUT_AMOUNT
where SEQNO_1>0


update TMP_STOCKS_CALC set BAL_PRICE=(
select case when (A.IN_AMOUNT+B.BAL_AMOUNT)<>0 then (A.IN_MONEY+B.BAL_MONEY)/(A.IN_AMOUNT+B.BAL_AMOUNT) else B.BAL_PRICE end  
from TMP_STOCKS_CALC A,TMP_STOCKS_CALC B 
where A.GODS_ID=B.GODS_ID and A.BATCH_NO=B.BATCH_NO and A.SEQNO_1=B.SEQNO_1+1 
and A.SEQNO_1=TMP_STOCKS_CALC.SEQNO_1 and A.GODS_ID=TMP_STOCKS_CALC.GODS_ID and A.BATCH_NO=TMP_STOCKS_CALC.BATCH_NO
),BAL_MONEY=BAL_PRICE*BAL_AMOUNT where SEQNO_1>0


update TMP_STOCKS_CALC set BAL_PRICE=(
select case when sum(BAL_AMOUNT)<>0 then sum(A.BAL_AMOUNT*A.BAL_PRICE)/sum(BAL_AMOUNT) else max(BAL_PRICE) end  
from TMP_STOCKS_CALC A
where A.SEQNO_1 in (TMP_STOCKS_CALC.SEQNO_1-2,TMP_STOCKS_CALC.SEQNO_1-1) and A.[GODS_ID]=TMP_STOCKS_CALC.GODS_ID and A.BATCH_NO=TMP_STOCKS_CALC.BATCH_NO
) where (SEQNO_1 %2)<>0 AND SEQNO_1>1

insert into TMP_STOCKS_CALC(SEQNO_1,GODS_ID,BATCH_NO,BAL_AMOUNT,BAL_PRICE,BAL_MONEY)
select SEQNO_1-1,GODS_ID,BATCH_NO,IN_AMOUNT,case when IN_AMOUNT<>0 then IN_MONEY/IN_AMOUNT else 0 end as IN_PRICE,IN_MONEY from TMP_STOCKS_CALC where SEQNO_1>1

--补单容错
update TMP_STOCKS_CALC set SEQNO_1=
(
 select ifnull(max(SEQNO_1),1)+1 from TMP_STOCKS_CALC B where 
  B.GODS_ID=TMP_STOCKS_CALC.GODS_ID and 
  B.BATCH_NO=TMP_STOCKS_CALC.BATCH_NO and 
  B.BAL_AMOUNT>0 and (SEQNO_1 %2)<>0 
) where (SEQNO_1 %2)=0 